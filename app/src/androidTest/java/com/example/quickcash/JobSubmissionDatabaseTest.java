package com.example.quickcash;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import com.example.quickcash.Firebase.JobCRUD;
import com.example.quickcash.model.Job;
import com.example.quickcash.model.JobLocation;
import com.google.android.gms.tasks.Task;
import com.google.android.gms.tasks.Tasks;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import org.junit.Before;
import org.junit.Test;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class JobSubmissionDatabaseTest {

    private FirebaseDatabase firebaseDatabase;
    private DatabaseReference mockDatabaseReference;
    private JobCRUD jobCRUD;

    @Before
    public void setUp() {
        firebaseDatabase = FirebaseDatabase.getInstance();
        jobCRUD = new JobCRUD(firebaseDatabase);
    }

    @Test
    public void testSubmitJobSendsCorrectDataToBackend() {
        try {
            // Create test job
            Job job = new Job();

            // Set up job location
            JobLocation location = new JobLocation(45.5017, -73.5673, "Montreal");
            job.setJobLocation(location);

            // Set all job fields
            job.setAllField(
                    "Cybersecurity Analyst",
                    "Tech Company",
                    "Full-time",
                    "Linux, Java",
                    50,
                    "High",
                    "Montreal",
                    "20",
                    "Nov 20, 2024",
                    "test@gmail.com",
                    null, // jobId will be generated by Firebase
                    45.5017,
                    -73.5673
            );

            // Submit job
            Task<Boolean> task = jobCRUD.submitJob(job);
            Boolean result = Tasks.await(task, 30, TimeUnit.SECONDS);

            // Verify submission
            assertTrue("Job submission should be successful", result);
            assertNotNull("Job ID should be generated", job.getJobId());

        } catch (ExecutionException | InterruptedException | TimeoutException e) {
            fail("Test failed with exception: " + e.getMessage());
        }
    }

    @Test
    public void testJobDataMappingToBackendStructure() {
        try {
            // Create test job with all required fields
            Job testJob = new Job();

            // Set location first
            JobLocation location = new JobLocation(45.5017, -73.5673, "Montreal");
            testJob.setJobLocation(location);

            testJob.setAllField(
                    "Cybersecurity Analyst",
                    "Tech Company",
                    "Full-time",
                    "Linux, Java",
                    50,
                    "High",
                    "Montreal",
                    "20",
                    "Nov 20, 2024",
                    "test@gmail.com",
                    null, // ID will be generated
                    45.5017,
                    -73.5673
            );

            // Submit test job first
            Task<Boolean> submitTask = jobCRUD.submitJob(testJob);
            Tasks.await(submitTask, 30, TimeUnit.SECONDS);
            assertTrue("Job submission failed", submitTask.isSuccessful());

            String jobId = testJob.getJobId();
            assertNotNull("Job ID should not be null", jobId);

            // Fetch the job and verify all fields
            Task<Job> fetchTask = jobCRUD.getJobById(jobId);
            Job fetchedJob = Tasks.await(fetchTask, 30, TimeUnit.SECONDS);

            assertNotNull("Fetched job should not be null", fetchedJob);

            // Verify all fields match
            assertEquals("Job title should match", "Cybersecurity Analyst", fetchedJob.getJobTitle());
            assertEquals("Company name should match", "Tech Company", fetchedJob.getCompanyName());
            assertEquals("Job type should match", "Full-time", fetchedJob.getJobType());
            assertEquals("Requirements should match", "Linux, Java", fetchedJob.getRequirements());
            assertEquals("Salary should match", 50, fetchedJob.getSalary());
            assertEquals("Urgency should match", "High", fetchedJob.getUrgency());
            assertEquals("Location should match", "Montreal", fetchedJob.getLocation());
            assertEquals("Duration should match", "20", fetchedJob.getExpectedDuration());
            assertEquals("Start date should match", "Nov 20, 2024", fetchedJob.getStartDate());
            assertEquals("Employer ID should match", "test@gmail.com", fetchedJob.getEmployerId());

            // Verify location data
            JobLocation fetchedLocation = fetchedJob.getJobLocation();
            assertNotNull("Job location should not be null", fetchedLocation);
            assertEquals("Latitude should match", 45.5017, fetchedLocation.getLat(), 0.0001);
            assertEquals("Longitude should match", -73.5673, fetchedLocation.getLng(), 0.0001);
            assertEquals("Location address should match", "Montreal", fetchedLocation.getAddress());

        } catch (ExecutionException | InterruptedException | TimeoutException e) {
            fail("Test failed with exception: " + e.getMessage());
        }
    }
}